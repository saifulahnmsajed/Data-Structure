#include <bits/stdc++.h>
using namespace std;

class MaxHeap
{
    int * arr;
    int Size;  // total element in heap
    int totalSize; //total size of array
public:
    MaxHeap(int n)
    {
        arr = new int[n];
        Size = 0;
        totalSize = n;
    }
    //Insert
    void Insert(int val)
    {
        if(totalSize == Size) { cout<< "Heap overflow\n"; return; }

        arr[Size] = val;
        int index = Size;
        Size++;

        while(index > 0 &&  arr[(index-1)/2] < arr[index])
        {
            swap(arr[index], arr[(index-1)/2]);
            index = (index-1)/2;
        }
        cout<< arr[index] << " is inserted into the heap\n";
    }
    void print()
    {
        for (int i = 0; i < Size; i++)
        {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
     void Heapify(int index)
     {
         int largest = index;
         int left = 2*index +1;
         int right = 2*index +2;
         if(left<Size && arr[left]>arr[largest])
         {
             largest = left;
         }
         if(right<Size && arr[right]>arr[largest])
         {
             largest = right;
         }
         if(largest!=index)
         {
             swap(arr[index], arr[largest]);
             Heapify(largest);
         }
     }
    void Delete()
    {
        if(Size == 0)
        {
            cout<< "Heap Underflow\n";
            return;
        }
        cout<< arr[0] << " delete from the Node\n";
        arr[0] = arr[Size-1];
        Size--;
        if(Size==0)return;
        Heapify(0);
    }
};

int main()
{
    MaxHeap H1(6);
    H1.Insert(4);
    H1.Insert(14);
    H1.Insert(11);
    H1.Delete();
    H1.print();
    H1.Insert(124);
    H1.Insert(24);
    H1.Insert(1);
    H1.Insert(1);
    H1.print();


    return 0;
}
